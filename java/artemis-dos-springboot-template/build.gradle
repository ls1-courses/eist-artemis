plugins {
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'java'
}

sourceCompatibility = 17
version = '1.0.0'
compileJava.options.encoding = 'UTF-8'



repositories {
    mavenCentral()
    mavenLocal()
}

def studentOutputDir = sourceSets.main.java.destinationDirectory.get()

sourceSets {
    main {
        java {
            srcDir 'assignment/src'
        }
    }
    test {
        java {
            srcDirs = ['test']
        }
    }
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-core:2.17.0'

    implementation 'com.amazonaws:aws-lambda-java-events:3.11.1'
    implementation 'com.amazonaws:aws-lambda-java-core:1.2.2'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    runtimeOnly 'io.netty:netty-resolver-dns-native-macos:4.1.89.Final:osx-aarch_64'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'


    // Artemis dependencies (for testing)
    testImplementation 'de.tum.in.ase:artemis-java-test-sandbox:1.13.0'
}


task buildZip(type: Zip) {
    into('lib') {
        from(jar)
        from(configurations.runtimeClasspath)
    }
}

def forbiddenPackageFolders = [ //(2)
                                "$studentOutputDir/ch/qos/logback/",
                                "$studentOutputDir/com/github/javaparser/",
                                "$studentOutputDir/com/intellij/",
                                "$studentOutputDir/com/sun/",
                                "$studentOutputDir/de/tum/in/test/api/",
                                "$studentOutputDir/java/",
                                "$studentOutputDir/javax/",
                                "$studentOutputDir/jdk/",
                                "$studentOutputDir/net/jqwik/",
                                "$studentOutputDir/org/assertj/",
                                "$studentOutputDir/org/apache/",
                                "$studentOutputDir/org/eclipse/",
                                "$studentOutputDir/org/gradle/",
                                "$studentOutputDir/org/jacoco/",
                                "$studentOutputDir/org/json/",
                                "$studentOutputDir/org/junit/",
                                "$studentOutputDir/org/opentest4j/",
                                "$studentOutputDir/sun/",
                                "$studentOutputDir/worker/org/gradle/",
                                // Required for Mockito
                                "$studentOutputDir/org/mockito/",
                                "$studentOutputDir/net/bytebuddy/",
                                "$studentOutputDir/org/objenesis/",
]

test {
    doFirst { //(1)
        for (String packageFolder in forbiddenPackageFolders) {
            assert !file(packageFolder).exists(): "$packageFolder must not exist within the submission."
        }
    }
    defaultCharacterEncoding = 'UTF-8'
    testLogging.showStandardStreams = true
    useJUnitPlatform()
}
